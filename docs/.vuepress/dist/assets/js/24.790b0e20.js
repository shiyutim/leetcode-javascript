(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{312:function(s,t,a){"use strict";a.r(t);var n=a(13),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_8-字符串转换整数-atoi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-字符串转换整数-atoi"}},[s._v("#")]),s._v(" 8 字符串转换整数 (atoi)")]),s._v(" "),t("h2",{attrs:{id:"题目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[s._v("#")]),s._v(" 题目")]),s._v(" "),t("p",[s._v("请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。")]),s._v(" "),t("p",[s._v("函数 myAtoi(string s) 的算法如下：")]),s._v(" "),t("p",[s._v('读入字符串并丢弃无用的前导空格\n检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。\n读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。\n将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。\n如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。\n返回整数作为最终结果。')]),s._v(" "),t("p",[s._v("注意：")]),s._v(" "),t("ul",[t("li",[s._v("本题中的空白字符只包括空格字符 ' ' 。")]),s._v(" "),t("li",[s._v("除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。")])]),s._v(" "),t("p",[s._v("示例 1：")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("输入：s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"42"')]),s._v("\n输出："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。\n第 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 步："),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"42"')]),s._v("（当前没有读入字符，因为没有前导空格）\n         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n第 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 步："),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"42"')]),s._v("（当前没有读入字符，因为这里不存在 "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-'")]),s._v(" 或者 "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+'")]),s._v("）\n         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n第 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 步："),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"42"')]),s._v("（读入 "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"42"')]),s._v("）\n           "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n解析得到整数 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" 。\n由于 "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"42"')]),s._v(" 在范围 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("231")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("231")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 内，最终结果为 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" 。\n")])])]),t("p",[s._v("示例 2：")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("输入：s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"   -42"')]),s._v("\n输出："),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n解释：\n第 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 步："),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"   -42"')]),s._v("（读入前导空格，但忽视掉）\n            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n第 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 步："),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"   -42"')]),s._v("（读入 "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-'")]),s._v(" 字符，所以结果应该是负数）\n             "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n第 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 步："),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"   -42"')]),s._v("（读入 "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"42"')]),s._v("）\n               "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n解析得到整数 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" 。\n由于 "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-42"')]),s._v(" 在范围 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("231")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("231")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 内，最终结果为 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" 。\n")])])]),t("p",[s._v("示例 3：")]),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("输入：s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4193 with words"')]),s._v("\n输出："),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4193")]),s._v("\n解释：\n第 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 步："),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4193 with words"')]),s._v("（当前没有读入字符，因为没有前导空格）\n         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n第 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 步："),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4193 with words"')]),s._v("（当前没有读入字符，因为这里不存在 "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-'")]),s._v(" 或者 "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+'")]),s._v("）\n         "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n第 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 步："),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4193 with words"')]),s._v("（读入 "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4193"')]),s._v("；由于下一个字符不是一个数字，所以读入停止）\n             "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n解析得到整数 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4193")]),s._v(" 。\n由于 "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4193"')]),s._v(" 在范围 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("231")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("231")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 内，最终结果为 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4193")]),s._v(" 。\n")])])]),t("p",[s._v("提示：")]),s._v(" "),t("ul",[t("li",[s._v("0 <= s.length <= 200")]),s._v(" "),t("li",[s._v("s 由英文字母（大写和小写）、数字（0-9）、' '、'+'、'-' 和 '.' 组成")])]),s._v(" "),t("h2",{attrs:{id:"题解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题解"}},[s._v("#")]),s._v(" 题解")]),s._v(" "),t("ol",[t("li",[s._v("使用正则匹配，然后比较是否超过最大值和最小值")])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("runtime",{attrs:{list:[72,70.58,43,60.11]}})],1),s._v(" "),t("div",{staticClass:"language-JavaScript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * @param {string} s\n * @return {number}\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("myAtoi")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("s")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" m "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("trim")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("^[+-]?\\d+")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("gi")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ret"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" maxN "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Math"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" minN "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Math"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ret "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" maxN"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" maxN\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ret "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" minN"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" minN\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ret\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);